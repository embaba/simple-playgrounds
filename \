
import math
import pymunk

import pytest
from simple_playgrounds.agent.part.part import AnchoredPart
from simple_playgrounds.entity.embodied.contour import Contour
from tests.mock_agents import MockAgent, MockAnchoredPart
from simple_playgrounds.playground.playground import EmptyPlayground


@pytest.fixture(scope='module', params=[(20, 20), (-20, -20), (0, 0)])
def pos(request):
    return request.param


@pytest.fixture(scope='module', params=[2,   0, 3, 9])
def angle(request):
    return request.param


@pytest.fixture(scope='module', params=[0])
def offset_angle(request):
    return request.param


@pytest.fixture(scope='module', params=[(10, 10), (-10, -10), (0, 0)])
def pos_on_part(request):
    return request.param


@pytest.fixture(scope='module', params=[(10, 10), (-10, -10), (0, 0)])
def pos_on_anchor(request):
    return request.param


def test_add_before_moving(pos, angle, pos_on_part, pos_on_anchor, offset_angle):


    angle = angle % (2*math.pi)
    playground = EmptyPlayground()
    agent = MockAgent(playground, coordinates=(pos, angle))

    contour = Contour(shape='rectangle', size=(50, 30))
    part = MockAnchoredPart(agent._base,
                            pivot_position_on_part=pos_on_part,
                            pivot_position_on_anchor=pos_on_anchor,
                            relative_angle=offset_angle,
                            rotation_range=math.pi,
                            contour=contour,
                            )

    # Check that joints are correct. Agent shouldn't move
    # for _ in range(100):
    #     playground.step()

    assert agent._base.position == pos
    part_pos = (pymunk.Vec2d(*pos)
                + pymunk.Vec2d(*pos_on_anchor).rotated(angle)
                - pymunk.Vec2d(*pos_on_part).rotated(angle+offset_angle))

    assert math.isclose(part.position.x, part_pos.x)
    assert math.isclose(part.position.y, part_pos.y)

#     agent.move_to((pos, 0))
#     part_pos_after_move = (pymunk.Vec2d(*pos) + pymunk.Vec2d(*pos_on_anchor)
#                            - pymunk.Vec2d(*pos_on_part).rotated(offset_angle))

#     assert math.isclose(part.position.x, part_pos_after_move.x)
#     assert math.isclose(part.position.y, part_pos_after_move.y)


